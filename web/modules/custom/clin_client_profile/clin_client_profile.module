<?php

use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\webform\Utility\WebformFormHelper;
use Drupal\webform\Entity\Webform;
use Drupal\user\Entity\User;
use Drupal\Core\Url;
use Drupal\Core\Database\Database;

function counsellor_deny_access($current_user_id) {
  \Drupal::service('civicrm')->initialize();     
  $civicrm_database = Database::getConnection('default', 'civicrm');
  
  $query = $civicrm_database->select('civicrm_uf_match', 'c')
    ->fields('c', ['contact_id'])
    ->condition('c.uf_id', $current_user_id)
    ->execute();
  
  $result = $query->fetchAssoc();
  
  if ($result) {
    $counsellorID = $result['contact_id'];   
  }
  else {
    return TRUE;
  }

  $path = \Drupal::request()->getPathInfo();
  $path = strtok($path, '?');
  $path_segments = explode('/', $path);
  $last_segment = end($path_segments);
  $clientID = is_numeric($last_segment) ? (int) $last_segment : 0;

  if(!$clientID || !$counsellorID) {
    return TRUE;
  }

  $relationships = \Civi\Api4\Relationship::get(FALSE)
    ->addWhere('contact_id_a', '=', $counsellorID)
    ->addWhere('contact_id_b', '=', $clientID)
    ->addWhere('relationship_type_id', '=', 17) // Counsellor for relationship type
    ->addWhere('is_active', '=', TRUE)
    ->setLimit(1)
    ->execute();

  // If client is not assigned to logged in counsellor, hide page
  if(!count($relationships)) {
    return TRUE;
  }
}

function ce_staff_deny_access($current_user_id) {
  \Drupal::service('civicrm')->initialize();     
  $civicrm_database = Database::getConnection('default', 'civicrm');
  $path = \Drupal::request()->getPathInfo();
  $path = strtok($path, '?');
  $path_segments = explode('/', $path);
  $last_segment = end($path_segments);

  $clientID = is_numeric($last_segment) ? (int) $last_segment : 0;

  if(!$clientID) {
    return TRUE;
  }

  // Get all users with a Counsellor relationship with the client
  $relationships = \Civi\Api4\Relationship::get(FALSE)
    ->addSelect('uf_match.uf_id')
    ->addJoin('UFMatch AS uf_match', 'LEFT', ['contact_id_a', '=', 'uf_match.contact_id'])
    ->addWhere('contact_id_b', '=', $clientID)
    ->addWhere('relationship_type_id', '=', 17)
    ->addWhere('is_active', '=', TRUE)
    ->execute();

  // Get user teams for each counsellor and current user
  foreach($relationships as $relationship) {
    $current_user_teams = _get_user_teams($current_user_id);
    $assigned_staff_teams = _get_user_teams($relationship['uf_match.uf_id']);

    if (array_intersect($current_user_teams, $assigned_staff_teams)) {
      return FALSE;
    }
  }
  return TRUE;
}

function clin_client_profile_views_pre_view($view, $display_id, &$args) {
  if ($view->id() == 'client_home' || $view->id() == 'security' || $view->id() == 'clin_flags' || $view->id() == 'appointments'|| $view->id() == 'contact_notes' || $view->id() == 'contact_information') {
    if ($display_id == 'page_1') {
      $current_user = \Drupal::currentUser();
      $current_user_id = \Drupal::currentUser()->id();
      $roles = $current_user->getRoles();
      if(!in_array('clin_director', $roles) && !in_array('wheel', $roles) && !in_array('clin_tl', $roles)) {
        // If logged in user is a counsellor
        if(in_array('clin_counsellor', $roles)) {
          if (counsellor_deny_access($current_user_id)) {
            \Drupal::messenger()->addError(t('You do not have access to view this client profile.'));
	          $access_result = Drupal\Core\Access\AccessResult::forbidden('You do not have access to this page.');
   	        throw new Drupal\Core\Http\Exception\CacheableAccessDeniedHttpException($access_result, $access_result->getReason());
          }
        }
      }
    }
  }
}

function clin_client_profile_preprocess_page(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $pattern = '/\/contact-information(?:\/[\w-]+)*\/(\d+)/';
  // Add JS to /client-home pages
  if (preg_match($pattern, $current_path, $matches)) {
    $variables['#attached']['library'][] = 'clin_client_profile/clin_client_profile';
  }
  if (preg_match('/\/contact-information\/edit\/(\d+)/', $current_path, $matches)) {
    $variables['#attached']['library'][] = 'clin_client_profile/clin_edit_contact';
  }
  if (preg_match('/\/contact-information\/notes\/(\d+)/', $current_path, $matches)) {
    $variables['#attached']['library'][] = 'clin_client_profile/clin_contact_notes';
  }
}

/**
 * Implements hook_form_alter().
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function clin_client_profile_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == "webform_submission_client_profile_add_form" || $form_id == "webform_submission_add_note_to_appointment" || 
  $form_id == "webform_submission_add_flag" ||  $form_id == "webform_submission_remove_flag") {

    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();

    if(!in_array('clin_director', $roles) && !in_array('wheel', $roles) && !in_array('clin_tl', $roles)) {
      // If logged in user is a counsellor
      if(in_array('clin_counsellor', $roles)) {

        $current_user_id = \Drupal::currentUser()->id();
        \Drupal::service('civicrm')->initialize();
        
        if (counsellor_deny_access($current_user_id)) {
	        $form['#access'] = FALSE;
        }
      }
      elseif(in_array('ce_staff', $roles)) {
        if (ce_staff_deny_access($current_user_id)) {
          if ($form_id == "webform_submission_client_profile_add_form") {
            $form['#prefix'] = '<div class="webform-locked-message">' . t('You do not have access to edit this client.') . '</div>';
            $form['#attributes']['class'][] = 'webform-locked';
            $form['actions']['submit']['#attributes']['disabled'] = 'disabled';
            clin_client_profile_make_form_read_only($form);
          }
          else {
            $form['#access'] = FALSE;
          }
        }
      }
      // Read only if reception or intake
      elseif(in_array('reception', $roles) || in_array('intake', $roles)) {
        if ($form_id == "webform_submission_client_profile_add_form") {
          $form['#prefix'] = '<div class="webform-locked-message">' . t('You do not have access to edit this client.') . '</div>';
          $form['#attributes']['class'][] = 'webform-locked';
          $form['actions']['submit']['#attributes']['disabled'] = 'disabled';
          clin_client_profile_make_form_read_only($form);
        }
        else {
          $form['#access'] = FALSE;
        }
      }
      // Hide form otherwise
      else {
        \Drupal::messenger()->addError(t('You do not have access to view this content.'));
        $form['#access'] = FALSE;
      } 
    }
  }
}

function clin_client_profile_make_form_read_only(&$elements) {
  foreach ($elements as $key => &$element) {
    if (is_array($element)) {
      if (isset($element['#type']) && in_array($element['#type'], ['textfield', 'textarea', 'select', 'checkbox', 'radios', 'checkboxes', 'date', 'email', 'number', 'tel', 'url'])) {
        $element['#attributes']['readonly'] = 'readonly';
        if ($element['#type'] == 'select') {
          $element['#attributes']['disabled'] = 'disabled';
        }
        if ($element['#type'] == 'checkbox' || $element['#type'] == 'radios' || $element['#type'] == 'checkboxes') {
          $element['#disabled'] = TRUE;
        }
      } elseif (!empty($element)) {
        clin_client_profile_make_form_read_only($element);
      }
    }
  }
}

function clin_client_profile_preprocess_menu(&$variables) {
  if ($variables['menu_name'] == 'main') {
    $current_user = \Drupal::currentUser();
    $uid = $current_user->id();

    // Call a recursive function to update the URL of the nested menu item.
    clin_client_profile_update_nested_menu_item($variables['items'], $uid);
  }
}

// Append uid to my-clients view for filtering
function clin_client_profile_update_nested_menu_item(&$items, $uid) {
  foreach ($items as &$item) {
    if (isset($item['url'])) {
      $path = $item['url']->toString();

      // Check if the path is 'my-clients'.
      if ($path == '/my-clients') {
        // Update the URL to include the current user's UID.
        $item['url'] = Url::fromUri('internal:/my-clients/' . $uid);
      }
    }

    // If this is the Search menu link
    if ($path == '/my-clients' && !empty($item['below'])) {
      clin_client_profile_update_nested_menu_item($item['below'], $uid);
    }
  }
}

function _get_user_teams($uid) {
  $user = User::load($uid);
  if ($user && $user->hasField('user_team')) {
    $team_ids = $user->get('user_team')->getValue();
    $team_ids = array_column($team_ids, 'target_id');
    return $team_ids;
  }
  return [];
}

