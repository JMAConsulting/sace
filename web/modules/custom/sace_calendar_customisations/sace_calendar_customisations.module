<?php

use Drupal\views\ViewExecutable;
use Drupal\Core\Asset\AttachedAssetsInterface;

function sace_calendar_customisations_block_view_fullcalendar_block_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  $build['#attached']['library'][] = 'sace_calendar_customisations/calendar_block';
}

function sace_calendar_customisations_views_pre_render(ViewExecutable $view) {
  if ($view->id() === 'clin_calendar') {
    $view->element['#attached']['library'][] = 'sace_calendar_customisations/sace_calendar_customisations';
  }
  if ($view->id() === 'kg_duplicate_of_ped_booking_calendar') {
    $view->element['#attached']['library'][] = 'fontawesome/fontawesome.svg.solid';
    $view->element['#attached']['library'][] = 'sace_calendar_customisations/sace_calendar_booking_calendar_copy';
  }
  if ($view->id() === 'team_calendar') {
    $view->element['#attached']['library'][] = 'sace_calendar_customisations/team_calendar';
  }
}

function sace_calendar_customisations_views_pre_execute(ViewExecutable $view) {
  if ($view->current_display == 'rest_export_1' && in_array($view->id(), ['kg_duplicate_of_ped_booking_calendar', 'calendar_counsellors', 'team_calendar'])) {
    if (\Drupal::request()->query->has('start') && \Drupal::request()->query->has('end')) {
      $start = \Drupal::request()->query->all()['start'];
      $end = \Drupal::request()->query->all()['end'];
      $status = (array) \Drupal::request()->query->all()['status_id'];
      $view->build_info['query']->leftJoin('civicrm_value_booking_infor_2', 'cf', 'cf.entity_id = civicrm_activity.id ');
      $view->build_info['query']->where("(
        (
          (DATE_FORMAT((civicrm_activity.activity_date_time + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $start . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')) AND
          (DATE_FORMAT((cf.end_date_661 + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') <= DATE_FORMAT(('" . $end . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s'))
        ) OR (
          (DATE_FORMAT((civicrm_activity.activity_date_time + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $start . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')) AND
          (DATE_FORMAT((civicrm_activity.activity_date_time + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') <= DATE_FORMAT(('" . $end . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')) AND
          (DATE_FORMAT((cf.end_date_661 + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $end . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s'))
        ) OR (
          (DATE_FORMAT((civicrm_activity.activity_date_time + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') <= DATE_FORMAT(('" . $start . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')) AND
          (DATE_FORMAT((cf.end_date_661 + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $end . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s'))
        ) OR (
          (DATE_FORMAT((civicrm_activity.activity_date_time + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') <= DATE_FORMAT(('" . $start . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')) AND
          (DATE_FORMAT((cf.end_date_661 + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') <= DATE_FORMAT(('" . $end . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')) AND
          (DATE_FORMAT((cf.end_date_661 + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $start . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s'))
         ) OR (
          (cf.end_date_661 IS NULL AND (DATE_FORMAT((civicrm_activity.activity_date_time + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $start . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')))
      ))");

      if (!empty($status)) {
        $view->build_info['query']->where("(civicrm_activity.status_id IN ( " . implode(',', $status) . "))");
      }
    }
    if ($view->id() == 'calendar_counsellors' && ($uid = \Drupal::currentUser()->id())) {
      $view->build_info['query']->where("((users_field_data_civicrm_uf_match.uid = '" . $uid . "'))");
    }
    if ($view->id() == 'team_calendar' && ($tid = $_GET['tid'])) {
      $tid = $tid == 'All' ? 'IS NOT NULL' : "= $tid";
      $view->build_info['query']->where("((taxonomy_term_field_data_user__field_user_team.tid $tid ))");
    }
  }
  if ($view->id() == 'activity_detail') {
    $view->build_info['query']->groupby('civicrm_activity.id');
    // following are needed to make the query full group by compat - but break things currently
    // $view->build_info['query']->groupby('civicrm_contact_civicrm_activity_contact.id');
    // $view->build_info['query']->groupby('civicrm_contact_civicrm_activity_contact_1.id');
    // $view->build_info['query']->groupby('civicrm_contact_civicrm_activity_contact_2.id');
  }
  if ($view->id() == 'kg_duplicate_of_ped_booking_calendar' || $view->id() == 'ped_update_online_booking' || $view->id() == 'duplicate_of_ped_booking_calendar') {
    $view->build_info['query']->groupby('civicrm_activity_contact3.id');
    $view->build_info['query']->groupby('civicrm_contact_civicrm_activity_contact.id');
    $view->build_info['query']->where('civicrm_activity.activity_type_id <> 334');
  }
  if ($view->id() == 'calendar_counsellors' || $view->id() == 'team_calendar') {
    $view->build_info['query']->groupby('civicrm_activity_contact.id');
    $view->build_info['query']->groupby('civicrm_contact_civicrm_activity_contact.id');
    $view->build_info['query']->where('civicrm_activity.activity_type_id NOT IN (334, 197, 200)');
  }
  if ($view->id() == 'my_calendar') {
    $uid = \Drupal::currentUser()->id() ?: 0;
    $view->build_info['query']->where("((users_field_data_civicrm_uf_match.uid = '" . $uid . "'))");
    $view->build_info['query']->where('civicrm_activity.activity_type_id <> 334');
  }
  if ($view->id() == 'my_reminders') {
    \Drupal::service('civicrm')->initialize();

    $loggedInContactId = \CRM_Core_Session::getLoggedInContactId();

    $activityIds = \Civi\Api4\Activity::get(FALSE)
      // current user has role for booking
      // NOTE: these may not work on the form currently?
      ->addJoin('ActivityRole AS activity_role', 'INNER',
        ['activity_role.activity_id', '=', 'id'],
        ['activity_role.assignee_contact_id', '=', $loggedInContactId]
      )
      // no completed evaluation summary
      ->addJoin('Activity AS completed_summary', 'EXCLUDE',
        ['completed_summary.PED_Booking_Reference.Booking_Reference_ID', '=', 'id'],
        ['completed_summary.status_id:name', '=', '"Completed"'],
        ['completed_summary.activity_type_id:name', '=', '"PED - Presentation Evaluation Summary Score"']
      )
      // enabled booking types
      ->addWhere('activity_type_id:name', 'IN', ['PED - Youth School Presentation Booking', 'PED - Adult or professional booking', 'PED - Online Course Booking', 'Adult Online Course Booking Request'])
      // past end date
      ->addWhere('Booking_Information.End_Date', '<', 'now')
      // booking status is completed
      ->addWhere('status_id:name', '=', 'Completed')
      ->addSelect('id')
      ->execute()
      ->column('id');

    if (!$activityIds) {
      $view->build_info['query']->where('0 = 1');
    }
    else {
      $activityIds = implode(',', $activityIds);
      $view->build_info['query']->where("civicrm_activity.id IN ({$activityIds})");
      $view->build_info['query']->groupby('civicrm_activity.id');
    }
  }
}

function sace_calendar_customisations_preprocess_views_view_field(&$variable) {

  if (($variable['view']->id() === 'activity_detail')
    && ($variable['field']->realField === 'details'))
  {
    $output = $variable['output'];
    // unscramble html
    $output = html_entity_decode($output);
    // create drupal markup element to prevent further filtering
    $output = \Drupal\Core\Render\Markup::create($output);
    $variable['output'] = $output;
  }
}

function sace_calendar_customisations_js_settings_alter(&$settings, AttachedAssetsInterface $assets) {
  if (isset($settings['fullCalendarView'])) {
    $settings['sace_calender_customisations']['fields'] = [
      'date' => 'edit-civicrm-1-activity-1-activity-activity-date-time-date',
      'time' => 'edit-civicrm-1-activity-1-activity-activity-date-time-time',
      'duration' => 'edit-civicrm-1-activity-1-activity-duration',
    ];
    if (\Drupal::request()->getPathInfo() === '/clin-update-appointment') {
      $settings['sace_calender_customisations']['fields'] = [
        'date' => 'edit-rescheduled-activity-date-date',
        'time' => 'edit-rescheduled-activity-date-time',
        'duration' => 'edit-recheduled-activity-duration',
      ];
    }
    foreach ($settings['fullCalendarView'] as $key => $setting) {
      $calender_view_settings = json_decode($setting['calendar_options'], TRUE);
      $calender_view_settings['editable'] = TRUE;
      $calender_view_settings['eventStartEditable'] = TRUE;
      $calender_view_settings['eventDurationEditable'] = TRUE;
      $calender_view_settings['selectable'] = TRUE;
      $calender_view_settings['selectHelper'] = TRUE;
      $calender_view_settings['selectMirror'] = TRUE;
      $calender_view_settings['slotDuration'] = '00:15:00';
      $calender_view_settings['slotLabelInterval'] = '01:00:00';
      $settings['fullCalendarView'][$key]['calendar_options'] = json_encode($calender_view_settings);
    }
  }
}
