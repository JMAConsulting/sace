<?php

use Drupal\views\ViewExecutable;
use Drupal\Core\Asset\AttachedAssetsInterface;

function sace_calendar_customisations_block_view_fullcalendar_block_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  $build['#attached']['library'][] = 'sace_calendar_customisations/calendar_block';
}

function sace_calendar_customisations_views_pre_render(ViewExecutable $view) {
  if ($view->id() === 'clin_calendar') {
    $view->element['#attached']['library'][] = 'sace_calendar_customisations/sace_calendar_customisations';
  }
  if ($view->id() === 'kg_duplicate_of_ped_booking_calendar') {
    $view->element['#attached']['library'][] = 'fontawesome/fontawesome.svg.solid';
    $view->element['#attached']['library'][] = 'sace_calendar_customisations/sace_calendar_booking_calendar_copy';
  }
  if ($view->id() === 'team_calendar') {
    $view->element['#attached']['library'][] = 'sace_calendar_customisations/team_calendar';
  }
}

function sace_calendar_customisations_views_pre_execute(ViewExecutable $view) {
  if ($view->current_display == 'rest_export_1' && in_array($view->id(), ['kg_duplicate_of_ped_booking_calendar', 'calendar_counsellors', 'team_calendar'])) {
    if (\Drupal::request()->query->has('start') && \Drupal::request()->query->has('end')) {
      $start = \Drupal::request()->query->all()['start'];
      $end = \Drupal::request()->query->all()['end'];
      $view->build_info['query']->leftJoin('civicrm_value_booking_infor_2', 'cf', 'cf.entity_id = civicrm_activity.id ');
      $view->build_info['query']->where("(
        (
          (DATE_FORMAT((civicrm_activity.activity_date_time + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $start . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')) AND
          (DATE_FORMAT((cf.end_date_661 + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') <= DATE_FORMAT(('" . $end . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s'))
        ) OR (
          (DATE_FORMAT((civicrm_activity.activity_date_time + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $start . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')) AND
          (DATE_FORMAT((civicrm_activity.activity_date_time + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') <= DATE_FORMAT(('" . $end . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')) AND
          (DATE_FORMAT((cf.end_date_661 + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $end . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s'))
        ) OR (
          (DATE_FORMAT((civicrm_activity.activity_date_time + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') <= DATE_FORMAT(('" . $start . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')) AND
          (DATE_FORMAT((cf.end_date_661 + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $end . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s'))
        ) OR (
          (DATE_FORMAT((civicrm_activity.activity_date_time + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') <= DATE_FORMAT(('" . $start . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')) AND
          (DATE_FORMAT((cf.end_date_661 + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') <= DATE_FORMAT(('" . $end . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')) AND
          (DATE_FORMAT((cf.end_date_661 + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $start . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s'))
         ) OR (
          (cf.end_date_661 IS NULL AND (DATE_FORMAT((civicrm_activity.activity_date_time + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s') >= DATE_FORMAT(('" . $start . "' + INTERVAL -25200 SECOND), '%Y-%m-%d\T%H:%i:%s')))
      ))");
    }
    if ($view->id() == 'calendar_counsellors' && ($uid = \Drupal::currentUser()->id())) {
      $view->build_info['query']->where("((users_field_data_civicrm_uf_match.uid = '" . $uid . "'))");
    }
    if ($view->id() == 'team_calendar' && ($tid = $_GET['tid'])) {
      $tid = $tid == 'All' ? 'IS NOT NULL' : "= $tid";
      $view->build_info['query']->where("((taxonomy_term_field_data_user__field_user_team.tid $tid ))");
    }
  }
  if ($view->id() == 'activity_detail') {
    $view->build_info['query']->groupby('civicrm_activity.id');
  }
  if ($view->id() == 'kg_duplicate_of_ped_booking_calendar' || $view->id() == 'ped_update_online_booking' || $view->id() == 'duplicate_of_ped_booking_calendar') {
    $view->build_info['query']->groupby('civicrm_activity_contact3.id');
    $view->build_info['query']->groupby('civicrm_contact_civicrm_activity_contact.id');
  }
  if ($view->id() == 'calendar_counsellors' || $view->id() == 'team_calendar') {
    $view->build_info['query']->groupby('civicrm_activity_contact.id');
    $view->build_info['query']->groupby('civicrm_contact_civicrm_activity_contact.id');    
    $view->build_info['query']->where('civicrm_activity.activity_type_id NOT IN (197, 200)'); 
  }
}

function sace_calendar_customisations_js_settings_alter(&$settings, AttachedAssetsInterface $assets) {
  if (isset($settings['fullCalendarView'])) {
    $settings['sace_calender_customisations']['fields'] = [
      'date' => 'edit-civicrm-1-activity-1-activity-activity-date-time-date',
      'time' => 'edit-civicrm-1-activity-1-activity-activity-date-time-time',
      'duration' => 'edit-civicrm-1-activity-1-activity-duration',
    ];
    if (\Drupal::request()->getPathInfo() === '/clin-update-appointment') {
      $settings['sace_calender_customisations']['fields'] = [
        'date' => 'edit-rescheduled-activity-date-date',
        'time' => 'edit-rescheduled-activity-date-time',
        'duration' => 'edit-recheduled-activity-duration',
      ];
    }
    foreach ($settings['fullCalendarView'] as $key => $setting) {
      $calender_view_settings = json_decode($setting['calendar_options'], TRUE);
      $calender_view_settings['editable'] = TRUE;
      $calender_view_settings['eventStartEditable'] = TRUE;
      $calender_view_settings['eventDurationEditable'] = TRUE;
      $calender_view_settings['selectable'] = TRUE;
      $calender_view_settings['selectHelper'] = TRUE;
      $calender_view_settings['selectMirror'] = TRUE;
      $calender_view_settings['slotDuration'] = '00:15:00';
      $calender_view_settings['slotLabelInterval'] = '01:00:00';
      $settings['fullCalendarView'][$key]['calendar_options'] = json_encode($calender_view_settings);
    }
  }
}

// Preprocess background colours to pull from CiviCRM Appointment Colours extension versus UI 
function sace_calendar_customisations_preprocess_views_view_fullcalendar(&$variables) {
  $view = $variables['view'];
  if ($view->id() == 'clin_calendar' || ($view->id() == 'team_calendar' && isset($view->args[0]))) {
    // Fetch appointment colours based on activity type.
    $appointmentColours = \Civi\Api4\AppointmentColours::get(FALSE)
      ->addSelect('colour_hex', 'option_value.label')
      ->addJoin('OptionValue AS option_value', 'LEFT', ['activity_type_id', '=', 'option_value.value'])
      ->addWhere('option_value.option_group_id', '=', 2)
      ->addWhere('colour_hex', 'IS NOT NULL')
      ->addWhere('colour_hex', '!=', 0)
      ->execute();

    $mapping = [];
    foreach ($appointmentColours as $item) {
      $value = $item['option_value.label'];
      $colourHex = $item['colour_hex'];
      $mapping[$value] = $colourHex;
    }
    $events = [];
    if (isset($variables['#attached']['drupalSettings']['fullCalendarView'][$variables['view_index']]['calendar_options'])) {
      $events = $variables['#attached']['drupalSettings']['fullCalendarView'][$variables['view_index']]['calendar_options'];
    }
    // Decode event data from JSON into array for modification
    $eventData = json_decode($events, true);

    // Get title of event and match to activity type + hex code
    if ($eventData !== null) {
    $events = $eventData['events'];
    foreach ($events as &$event) {
     $title = $event['title'];

      $parts = explode('-', $title, 2);
      $extractedTitle = trim($parts[1]);
      if (isset($mapping[$extractedTitle])) {
        $event['backgroundColor'] = '#'.$mapping[$extractedTitle];
      }
    }
  }
  $eventData['events']=$events;
  // Encode modified data back to JSON
  $variables['#attached']['drupalSettings']['fullCalendarView'][$variables['view_index']]['calendar_options']  = json_encode($eventData);
  }
}
