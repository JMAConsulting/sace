<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from appointment_notes/xml/schema/CRM/AppointmentNotes/AppointmentNotes.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:9ae3f44341a485dab5a491dc603f7707)
 */
use CRM_AppointmentNotes_ExtensionUtil as E;

/**
 * Database access object for the AppointmentNotes entity.
 */
class CRM_AppointmentNotes_DAO_AppointmentNotes extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_appointment_notes';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique AppointmentNotes ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Note ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $note_id;

  /**
   * Attachment
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $attachment_id;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_appointment_notes';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('AppointmentNotes') : E::ts('AppointmentNotes');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('AppointmentNotes ID'),
          'description' => E::ts('Unique AppointmentNotes ID'),
          'required' => TRUE,
          'where' => 'civicrm_appointment_notes.id',
          'table_name' => 'civicrm_appointment_notes',
          'entity' => 'AppointmentNotes',
          'bao' => 'CRM_AppointmentNotes_DAO_AppointmentNotes',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'note_id' => [
          'name' => 'note_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Note ID'),
          'description' => E::ts('Note ID'),
          'where' => 'civicrm_appointment_notes.note_id',
          'table_name' => 'civicrm_appointment_notes',
          'entity' => 'AppointmentNotes',
          'bao' => 'CRM_AppointmentNotes_DAO_AppointmentNotes',
          'localizable' => 0,
          'add' => NULL,
        ],
        'attachment_id' => [
          'name' => 'attachment_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Attachment ID'),
          'description' => E::ts('Drupal Webform Attachment ID'),
          'where' => 'civicrm_appointment_notes.attachment_id',
          'table_name' => 'civicrm_appointment_notes',
          'entity' => 'AppointmentNotes',
          'bao' => 'CRM_AppointmentNotes_DAO_AppointmentNotes',
          'localizable' => 0,
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'appointment_notes', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'appointment_notes', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
