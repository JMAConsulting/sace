<?php

/**
 * @file
 * Contains civicrm_entity_vf.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_user_form_alter().
*/
function civicrm_entity_vf_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id){
  $color_field = 'field_calendar_colour';

  if (!empty($form[$color_field]) && $form[$color_field]['widget']['#type'] == 'radios') {
    $form[$color_field]['widget']['#options_label_attributes'] = [];
    foreach ($form['field_calendar_colour']['widget']['#options'] as $k => $v) {
      if (preg_match('/^#[a-fA-F0-9]{6}$/', $v)) {
        $form[$color_field]['widget']['#options_label_attributes'][$k] = [
          'style' => 'color: ' . $v . ';',
        ];
      }
    }
  }
}

/**
 * Implements hook_views_exposed_form_alter().
*/
function civicrm_entity_vf_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id){

  if (!empty($form['uf_select'])) {

    $view = $form_state->get('view');

    // Get style options.
    /** @var \Drupal\views\ViewExecutable $view */
    $style_options = $view->getStyle()->options;
    $tids = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->getQuery()
      ->condition('vid', 'calendar_colour')->accessCheck(TRUE)
      ->execute();
    $taxonomies = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadMultiple($tids);
    $color_taxonomies = [];
    foreach ($taxonomies as $taxonomy) {
      $color_taxonomies[$taxonomy->id()] = $taxonomy->name->value;
    }

    // Check for a fullcalendar legend based on a user taxonomy.
    $is_user_taxonomy_color_legend = FALSE;
    if (!empty($style_options['tax_field']) && !empty($color_taxonomies)) {
      $user_fields = array_keys(\Drupal::service('entity_field.manager')->getFieldDefinitions('user', 'user'));
      if (in_array($style_options['tax_field'], $user_fields)) {
        $is_user_taxonomy_color_legend = TRUE;
      }
    }

    $contact_ids = array_keys($form['uf_select']['#options']);
    if (empty($contact_ids)) {
      return;
    }
    $team_contact_id_map = [];
    $team_contact_id_lookup = \Drupal::service('civicrm_entity.api')->get('UFMatch', [
      'sequential' => 1,
      'return' => ['uf_id', 'contact_id'],
      'contact_id' => ['IN' => $contact_ids],
      'options' => ['limit' => 0],
    ]);
    foreach($team_contact_id_lookup as $tc) {
      $contact_ids[$tc['contact_id']] = $tc['contact_id'];
      $team_contact_id_map[$tc['contact_id']] = $tc['uf_id'];
    }

    $map_uid_cid = [];

    $contact_tids = [];

    $user_team = [];

    // Map user ids to civicrm contact ids.
    $uid_lookup = \Drupal::service('civicrm_entity.api')->get('UFMatch', [
      'sequential' => 1,
      'return' => ['uf_id', 'contact_id'],
      'contact_id' => ['IN' => $contact_ids],
      'options' => ['limit' => count($contact_ids)],
    ]);
    foreach ($uid_lookup as $r) {
      $map_uid_cid[$r['uf_id']] = $r['contact_id'];
    }

    // Check user fields for team and color.
    $users = \Drupal::entityTypeManager()->getStorage('user')->loadMultiple(array_keys($map_uid_cid));
    foreach ($users as $user) {

      if ($is_user_taxonomy_color_legend) {
        /** @var \Drupal\User\Entity\User $user */
        $contact_tids[$map_uid_cid[$user->id()]] = $user->get($style_options['tax_field'])->first()->target_id;
      }

    }

    // Remove users who are not on our team.
    //if (!empty($user_team)) {
    //  foreach ($contact_ids as $cid) {
    //    if (empty($user_team[$cid])) {
    //      unset($contact_ids[$cid]);
    //      unset($form['uf_select']['#options'][$cid]);
    //    }
    //  }
    //}

    //
    // Add colors to checkboxes.
    //

    if ($is_user_taxonomy_color_legend) {

      $options_attributes = [];
      $options_label_attributes = [];

      foreach ($contact_ids as $contact_id) {

        $tid = $contact_tids[$contact_id];

        if (!empty($color_taxonomies[$tid])) {

          $color = $color_taxonomies[$tid];

          $options_attributes[$contact_id] = [
            'style' => 'background-color:' . $color . ';border-color:' . $color . ';' . 'color:' . $color . ';',
            'class' => ['checkbox-colored'],
          ];

          $options_label_attributes[$contact_id] = [
            'style' => 'color: ' . $color . ';',
          ];
        }
      }

      $form['uf_select']['#options_attributes'] = $options_attributes;
      // $form['uf_select']['#options_label_attributes'] = $options_label_attributes;
    }
  }
}

/**
 * Implements hook_help().
 */
function civicrm_entity_vf_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the civicrm_entity_vf module.
    case 'help.page.civicrm_entity_vf':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Extra filters for CiviCRM views') . '</p>';
      return $output;

    default:
  }
}
